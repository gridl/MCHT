% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MonteCarloTest.R
\name{MCHTest}
\alias{MCHTest}
\title{Create an MCHTest Object}
\usage{
MCHTest(test_stat, stat_gen, rand_gen = runif, N = 10000,
  seed = NULL, memoise_sample = TRUE, pval_func = MCHT::pval,
  method = "Monte Carlo Test", test_params = NULL,
  fixed_params = NULL, nuisance_params = NULL, optim_control = NULL,
  lock_alternative = TRUE, threshold_pval = 1,
  suppress_threshold_warning = FALSE)
}
\arguments{
\item{test_stat}{A function that computes the test statistic from input data;
\code{x} must be a parameter of this function representing
test data}

\item{stat_gen}{A function that generates values of the test statistic when
given data; \code{x} (representing a sample) must be a
parameter of this function, and this function is expected to
return one numeric output, but if \code{n} is a parameter,
this will be interpreted as sample size information (this
could be useful for allowing a "burn-in" period in random
data, as is often the case when working with time series
data)}

\item{rand_gen}{A function generating random data; \code{n} (representing a
sample size) must be a parameter of this function}

\item{N}{Integer representing the number of replications of \code{stat_gen}
to generate}

\item{seed}{The random seed used to generate simulated statistic values; if
\code{NULL}, the seed will be randomly chosen each time the
resulting function is called (unless \code{memoise_sample} is
\code{TRUE})}

\item{memoise_sample}{If \code{TRUE}, simulated statistic values are saved
and will be used repeatedly if the inputs to
\code{stat_gen} don't change (such as the sample size,
\code{n}); this could be in conflict with \code{seed}
if \code{seed} is \code{NULL}, so set to \code{FALSE}
to allow for regeneration of random samples for every
call to the resulting function}

\item{pval_func}{A function that computes \eqn{p}-values from the test
statistic computed by \code{test_stat} using the simulated
data generated via \code{stat_gen}; see \code{\link{pval}}
for an example of how this function should be specified}

\item{method}{A string labelling the test}

\item{test_params}{A character vector of the names of parameters with values
specified under the null hypothesis; both \code{test_stat}
and \code{stat_gen} need to be able to recognize the
contents of this vector as parameters (for example, if
this argument is \code{"mu"}, then \code{mu} needs to be
an argument of both \code{test_stat} and \code{stat_gen}),
and the resulting test will try to pass these parameters
to \code{rand_gen} (but these \emph{do not} need to be
parameters of \code{rand_gen})}

\item{fixed_params}{A character vector of the names of parameters treated as
fixed values; this isn't needed but if these parameters
are being used then test output is more informative and
errors will be raised if \code{test_stat} and
\code{stat_gen} don't accept these parameters, which is
safer, and the resulting test will try to pass these
parameters to \code{rand_gen} (but these \emph{do not}
need to be parameters of \code{rand_gen})}

\item{nuisance_params}{A character vector of the names of parameters to be
treated as nuisance parameters; must be parameters
of \code{test_stat} and \code{stat_gen}, but these
\emph{will not} be viewed as parameters of
\code{rand_gen}, and cannot be non-\code{NULL} if
\code{optim_control} is \code{NULL}}

\item{optim_control}{A list of arguments to be passed to
\code{\link[GenSA]{GenSA}}, containing at least
\code{lower} and \code{upper} elements as named vectors,
with the names being identical to
\code{nuisance_params}, but could also include other
arguments to be passed to \code{\link[GenSA]{GenSA}};
the \code{fn} parameter will be set, and parameters of
that function will be the parameters mentioned in
\code{nuisance_params}, and this argument will be
ignored if \code{nuisance_params} is \code{NULL}}

\item{lock_alternative}{If \code{TRUE}, then the resulting function will
effectively ignore the \code{alternative} parameter,
while if \code{FALSE}, the resulting function will be
sensitive to values of \code{alternative}; this
argument exists to prevent shooting yourself in the
foot and accidentally computing \eqn{p}-values in
inappropriate ways}

\item{threshold_pval}{A numeric value that represents a threshold
\eqn{p}-value that, if surpassed by the optimization
algorithm, will cause the algorithm to terminate; will
override the \code{threshold.stop} argument in the
\code{control} list that's used by
\code{\link[GenSA]{GenSA}}}

\item{suppress_threshold_warning}{If \code{TRUE}, user will not be warned if
the threshold \eqn{p}-value was surpassed
by the optimization algorithm}
}
\value{
A \code{MCHTest}-class object, a function with parameters \code{x},
        \code{alternative}, and \code{...}, with other parameters being
        passed to functions such as those passed to \code{test_stat} and
        \code{stat_gen}, controlling what's tested and how; depending on
        \code{lock_alternative}, the \code{alternative} argument may be
        ignored
}
\description{
This function creates an \code{MCHTest}-class object, an S3 object that
defines a Monte Carlo test.
}
\details{
\code{MCHTest}-class objects are effectively functions that accept data and
maybe some parameters and return an \code{htest}-class object containing the
results of a Monte Carlo statistical test. These object will accept datasets
and perhaps some parameters and will return the results of a test.
}
\examples{
TODO: curtis: MORE EXAMPLES -- Sun 30 Sep 2018 01:29:04 AM MDT
dat1 <- c(0.16, 1.00, 0.67, 1.28, 0.31, 1.16, 1.25, 0.93, 0.66, 0.54)
mc.t.test <- MCHTest(test_stat = function(x, mu = 0) {
                       sqrt(length(x)) * (mean(x) - mu)/sd(x)
                     }, stat_gen = function(n, mu = 0) {
                       x <- rnorm(n, mean = mu)
                       sqrt(n) *  (mean(x) - mu)/sd(x)
                     }, seed = 123, method = "Monte Carlo t-Test",
                     test_params = "mu", lock_alternative = FALSE)
mc.t.test(dat1)
mc.t.test(dat1, mu = 0.1, alternative = "two.sided")
}
